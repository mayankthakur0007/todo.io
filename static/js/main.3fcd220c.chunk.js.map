{"version":3,"sources":["Form.jsx","App.js","index.js"],"names":["Validate","useState","entry","changeEntry","indexNumber","changeindex","editValue","changeEditValue","list","addEntry","addToast","useToasts","content","open","setOpen","handleClose","useEffect","localStorage","getItem","split","setItem","className","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","value","onChange","event","target","label","type","fullWidth","DialogActions","Button","onClick","appearance","autoDismiss","splice","color","onSubmit","e","preventDefault","pre","variant","map","item","index","handleClickOpen","element","arr","filter","deleteClicked","Form","App","ReactDOM","render","document","getElementById"],"mappings":"mSAaMA,EAAW,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACdC,EADc,KACPC,EADO,OAEcF,mBAAS,GAFvB,mBAEdG,EAFc,KAEDC,EAFC,OAGgBJ,mBAAS,IAHzB,mBAGdK,EAHc,KAGHC,EAHG,OAKIN,mBAAS,IALb,mBAKdO,EALc,KAKRC,EALQ,KAMbC,EAAaC,sBAAbD,SACJE,EAAU,6BAPO,EAWGX,oBAAS,GAXZ,mBAWdY,EAXc,KAWRC,EAXQ,KAkBfC,EAAc,WAClBD,GAAQ,IAGVE,qBAAU,WAC6B,KAAjCC,aAAaC,QAAQ,SACvBT,EAASQ,aAAaC,QAAQ,QAAQC,MAAM,QAE7C,IAmDH,OAJAH,qBAAU,WACRC,aAAaG,QAAQ,OAAQZ,KAC5B,CAACA,IAGF,sBAAKa,UAAU,YAAf,UACE,eAACC,EAAA,EAAD,CAAQT,KAAMA,EAAMU,QAASR,EAAaS,kBAAgB,oBAA1D,UACE,cAACC,EAAA,EAAD,CAAaC,GAAG,oBAAhB,uBACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,kCAGA,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPL,GAAG,MACHM,MAAO1B,EACP2B,SAAU,SAACC,GACT3B,EAAgB2B,EAAMC,OAAOH,QAE/BI,MAAM,YACNC,KAAK,OACLC,WAAS,OAGb,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAzDI,WAClB,GAAkB,KAAdnC,EAKF,OAJAI,EAASE,EAAS,CAChB8B,WAAY,QACZC,aAAa,KAER,EAEPnC,EAAKoC,OAAOxC,EAAY,EAAEE,GAC5BW,aAAaG,QAAQ,OAAQZ,GAC7BD,EAAgB,IAChBO,GAAQ,GACRJ,EA7CW,cA6CM,CACfgC,WAAY,OACZC,aAAa,KA2CqBE,MAAM,UAApC,oBAGA,cAACL,EAAA,EAAD,CAAQC,QAAS1B,EAAa8B,MAAM,UAApC,0BAKJ,8BACE,uBAAMC,SAhFO,SAACC,GAElB,GADAA,EAAEC,iBACY,KAAV9C,EAKF,OAJAQ,EAASE,EAAS,CAChB8B,WAAY,QACZC,aAAa,KAER,EAEPlC,GAAS,SAACwC,GAAD,4BAAaA,GAAb,CAAkB/C,OAC3BC,EAAY,KAsEV,UACI,cAAC0B,EAAA,EAAD,CACAC,WAAS,EACTC,OAAO,QACPL,GAAG,QACHM,MAAO9B,EACP+B,SAAU,SAACC,GACT/B,EAAY+B,EAAMC,OAAOH,QAE3BI,MAAM,cACNC,KAAK,OACLC,WAAS,IAEX,cAACE,EAAA,EAAD,CACEd,GAAG,MACHW,KAAK,SACLa,QAAQ,YACRL,MAAM,UAJR,8BAUJ,8BACE,kCACE,gCACE,6BACE,gDAGJ,gCACGrC,EAAK2C,KAAI,SAACC,EAAMC,GACf,OACE,6BACE,+BACE,sBAAKhC,UAAU,QAAf,UACGgC,EAAQ,EADX,KACgBD,KAEhB,sBAAK/B,UAAU,QAAf,UACE,cAAC,IAAD,CACEoB,QAAS,kBAvIP,SAACY,GACvBvC,GAAQ,GACRT,EAAYgD,GAqIuBC,CAAgBD,MAEjC,cAAC,IAAD,CACAZ,QAAS,kBAzFP,SAACY,EAAME,GAC3B,GAAIF,GAAS,EAAG,CACd,IAAIG,EAAMhD,EAAKiD,QAAO,SAAAL,GAAI,OAAIA,IAASG,KACvC9C,EAAS+C,GACT9C,EA1DU,sBA0DQ,CAChBgC,WAAY,UACZC,aAAa,KAmFgBe,CAAcL,EAAMD,aAVhCC,iBA+BVM,EARF,WACX,OACE,cAAC,gBAAD,UACE,cAAC,EAAD,OC1KSC,MARf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNwC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3fcd220c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ToastProvider, useToasts } from \"react-toast-notifications\";\nimport { Button } from \"@material-ui/core\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport DeleteOutlineRoundedIcon from \"@material-ui/icons/DeleteOutlineRounded\";\nimport \"./Form.css\";\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst Validate = () => {\n  const [entry, changeEntry] = useState(\"\");\n  const [indexNumber, changeindex] = useState(0);\n  const [editValue, changeEditValue] = useState(\"\");\n\n  const [list, addEntry] = useState([]);\n  const { addToast } = useToasts();\n  let content = \"Please Enter a ToDo item!!\";\n  let deleted = \"Yay! Item deleted!!\";\n  let edited = \"TODO Edited\";\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = (index) => {\n    setOpen(true);\n    changeindex(index);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem(\"data\") !== \"\") {\n      addEntry(localStorage.getItem(\"data\").split(\",\"));\n    }\n  }, []);\n\n  const addEntries = (e) => {\n    e.preventDefault();\n    if (entry === \"\") {\n      addToast(content, {\n        appearance: \"error\",\n        autoDismiss: true,\n      });\n      return false;\n    } else {\n      addEntry((pre) => [...pre, entry]);\n      changeEntry('')\n    }\n  };\n\n  const editClicked = () => {\n    if (editValue === \"\") {\n      addToast(content, {\n        appearance: \"error\",\n        autoDismiss: true,\n      });\n      return false;\n    } else {\n      list.splice(indexNumber,1,editValue);\n    localStorage.setItem(\"data\", list);\n    changeEditValue('');\n    setOpen(false);\n    addToast(edited, {\n      appearance: \"info\",\n      autoDismiss: true,\n    });\n    }\n   \n  };\n\n  const deleteClicked = (index,element) => {\n    if (index > -1) {\n      let arr = list.filter(item => item !== element)\n      addEntry(arr);\n      addToast(deleted, {\n        appearance: \"success\",\n        autoDismiss: true,\n      });\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"data\", list);\n  }, [list]);\n\n  return (\n    <div className=\"container\">\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Edit TODO</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n           Enter the new value\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"new\"\n            value={editValue}\n            onChange={(event) => {\n              changeEditValue(event.target.value);\n            }}\n            label=\"New Value\"\n            type=\"text\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={editClicked} color=\"primary\">\n            Change\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <div>\n        <form onSubmit={addEntries}>\n            <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"entry\"\n            value={entry}\n            onChange={(event) => {\n              changeEntry(event.target.value);\n            }}\n            label=\"To Do Task!\"\n            type=\"text\"\n            fullWidth\n          />\n          <Button\n            id=\"btn\"\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Add Entry!!\n          </Button>\n        </form>\n      </div>\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>To DO LIST</th>\n            </tr>\n          </thead>\n          <tbody>\n            {list.map((item, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    <div className=\"items\">\n                      {index + 1}. {item}\n                    </div>\n                    <div className=\"icons\">\n                      <EditTwoToneIcon\n                        onClick={() => handleClickOpen(index)}\n                      />\n                      <DeleteOutlineRoundedIcon\n                      onClick={() => deleteClicked(index,item)} />\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nconst Form = () => {\n  return (\n    <ToastProvider>\n      <Validate />\n    </ToastProvider>\n  );\n};\n\nexport default Form;\n","import Form from \"./Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}